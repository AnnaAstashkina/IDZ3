.include "macrolib.asm"
.global read

# a2 - адрес выделенной памяти в куче; a3 - адрес указателя в строке; a4 - максимальный размер текста для чтения
# t2 - длина считанной строки; t3 - адрес выделенной памяти в куче; 
# t5 - адрес на место чтения в строке; t4 - максимальный размер текста для чтения
# t6 - итоговое общее количество считанных байтов
read: 
	addi sp sp -4
	sw ra (sp)
	
	mv t3 a2              # адрес памяти в куче
	mv t5 a3              # указатель на память
	mv t4 a4              # максимальный размер кучи
	mv t6 zero            # итоговая длина считанной строки

read_loop:              
	read_addr_reg(s0, t5, t4)  # считываем в буффер по адресу t5
	beq a0 s1 error       # если в a0 -1 => ошибка
	mv t2 a0              # длина считанной строки
	add t6 t6 t2          # общее количество считанных байтов
	blt t2 t4 end_loop    # если считано меньше максимального размера все ок, переходим к концу
	allocate_reg(t4)      # иначе дополнительно выделяем память
	add t5 t5 t2          # смещаем адрес для чтения
	j read_loop           # продолжаем читать

end_loop:                     #закончили читать
	close(s0)             # закрываем файл для чтения
	mv t0 t3              # копируем начало в t0
	add t0 t0 t6          # добавляем в t0 общее количество считанных байтов из t6 (t0 - конец)
	addi t0 t0 1       # если надо поднимаем на 1
	sb zero (t0)         # сохраняем в конец 0
	mv a3 t3    	     # возвращаем адрес обратно в a3 (он там и лежал, это не возврат из функции) 
	lw ra (sp)           # возвращаем ra
    	addi sp sp 4          
	ret                   

error:                 
	print_string("Incorrect read operation\n")  
	li a7, 10
        ecall                 
